Preparation:
* rm data dir
* rm preprocessed configs
* slides
* start docker

Welcome back everyone.
Today we'll talk about extremely powerfull feature of ch

I mean I've sad a lot about how fast CH is, but the truth is,
not fast enough. I mean there's always ways to improve.
And CH team knows it. so they implemented aggregates.
Most of you know what aggregates are. I'll just quicly say that
aggregates are pretty much precompute values
Sometimes teams decide to precompute things with external job,
and save results to storage, like another db or a table
And it works. but this approach is not the best.
It's hard to maintain the jobs, and results could be hard to use on ever changing queries

CH allows us to do aggregates
Again a bit of ch docs talk
ClickHouse replaces all rows with the same primary key (or more accurately, with the same sorting key)
with a single row that stores a combination of states of aggregate functions.
But this all happens within data part. If data with same sorting(or primary) key
goes to different data parts, data will not be merged

ok, let's play a bit to make it a bit more visual

We would usually want to create materialized view with aggregates,
So our data floes from our master table to aggregated table without us
doing anything at all. Which is my prefered state of things

-- change to tabx

so here we create regular table of our beloved merge tree engine
And just alongside it we put our MV

please pay attention to sumState and uniqState functions that
we specify in our select clause.
so what we achive here is precompute values for sum of type of events
and uniq number of pokemon id
grouped by id and time.

-- change tabix
ok lets see how to use it now.

inserting some values in

and just checking that our event table has stuff

now to the good parts

regular select query that looks like this
we could rewrite to make it look like this

Wait and now to the good parts. Performance! I've run our bencmarking suite and results are as follows

-- switch to slides

TODO: need to do section about comparison
TODO: maybe query log on selector