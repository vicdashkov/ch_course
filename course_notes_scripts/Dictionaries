Preparation:
* rm data dir
* rm preprocessed configs
* slides
* vs code lesson files
* client connected

hi everyone, this is Vic again, and

Today we'll talk about dictionaries

Dictionaries in Ch allows us to store, well, dictionaries in ram.

We can connect CH dictionaries to external sources like databases and csv files

Connecting to external DB has obvious benefit of having access to recent data from external source
And csv files could be very useful if you have some heavy jobs running in other parts of your system
You can than mount some kind of network drive on your CH node, and access the result of this job streignt from CH
Very powerful.

You can even go as far as using result of dictionary lookup as a default values at insertion time
A bit dirty, but works like magic

-- change slide to dict layouts

Clickhouse has 7 different layouts at our disposal
But docs reccomend using flat, hashed and complex_key_hashed layouts
These layouts provide optimal processing speed.

In this video, we'll talk about flat dictionary
The dictionary key for Flat has to have UInt64 type
and the value is limited to only 500,000 elements
Ch will not create flat dictionary if more keys are discovered

This is very basic dictionary, but it's simple to understand and just enough to demonstrate
the concept

Ok, to the action now

-- open course files

This is our good old docker ch.
But this time I've added pokemon_dictionary.xml
and pokemon.csv
this is pretty much all you need to do to start using dict in CH

important fileds in pokemon_dictionary.xml are
dictionary name

lifetime (ch will update our dict at random within specified range)

layout (flat in our case, with limited number of keys)

and structure.

Structure has to represent your csv file.
In our case i've got pokemon id field in the mandatory id tag,
as well as pokemon name and pokemon pet name (do pokemons themselfs have pets? and do these pets have names?
not sure)

there's more tinkering you can do on dictionaries, but this will do for now

and let's take a quick look at pokemon.csv. where we see 3 columns we've described before
Please note we've got some empty fields for zalechu and bixby.
And this is allowed in clickhouse. As far as csv file is valid CH will not complain

ok, let's move to the action. i've already got our ch up and running

all seems fine.
lets dbl check that ch sees our dict

-- SELECT * FROM system.dictionaries

and here we see some basic info about our dict

lets quickly create a table for, say, event, surprise surprise
Structure for the table should be fairly familiar to you by now

And insert some stuff as well

let's now try to get something out of our dict

executing select, and here we can see default values (solo and rex)
for the pokemons that are not present in our CSV

-- show csv

our guy with id 1111 is not present in csv, so we assign default values solo and rex

you find pet_name to be too boring of a name? no problem we can change and
hot reload our dictionaries on demand
let's try

-- pet_name -> super_pet_name
-- execute select
-- reload dictionary
-- rename fields in query

Amazing

bonus point, lets create dict engine, which is relatively new addition to ch!

simple syntax. our fields represent our dict layout
we use dictionary eninge without any additional arguments

so now we can do a join here or even a simple select.
so now our dict is just like regular table.
could be very convenient sometimes
dictionary engine was added just recently, so that's nice

Anyway.

-- swithc to slides with summary

I hope you enjoyed this video as much as I did,
see you on the next one!