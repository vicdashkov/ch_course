Preparation:
* rm data dir
* rm preprocessed configs
* slides
* vs code lesson files
* tabix

Hello everyone

Today we'll talk about dictionaries
Dictionaries in Ch allows us to store, well, dictionaries in ram.

We can connect CH dictionaries to external sources like databases and csv files

Connecting to external DB has obvious benefit of having access to recent data from external source
And csv files could be very useful if you have some heavy jobs running in other parts of your system
You can than mount some kind of network drive on your CH node, and access the result of this job streignt from CH
Very powerful.

We event went as war as using result of dictionary lookups as default values.
A bit dirty, but works like magic

-- change slide to dict layouts

Clickhouse has 7 different layouts at our disposal
But docs reccomend using flat, hashed and complex_key_hashed layouts
These layouts provide optimal processing speed.

In this video, we'll talk about flat dictionary
The dictionary key has the UInt64 type and the value is limited to 500,000.
Ch will not create flat dictionary if more keys are discovered

Ok, to the action now

-- open course files

This is our good old docker ch.
But this time I've added pokemon_dictionary.xml
and pokemon.csv
this is pretty much all you need to do to start using dict in CH

important fileds in pokemon_dictionary.xml are
dictionary name
lifetime (ch will update our dict at random within specified range)
layout (flat in our case, with limited number of keys)
and structure.
Structure has to represent your csv file.
In our case i've got pokemon id field and mandatory id tag,
as well as pokemon name and pokemon pet name (do pokemons themselfs have pets? not sure)
there's more tinkering you can do, but this will do for now

and let's take a quick look at pokemon.csv. where we see 3 columns we've described before
Please note we've got some empty fields for zalechu and bixby

ok, let's move to the action. boot up our ch

-- run docker-compose up ch

all seems fine now. lets dbl check ch sees our dict

-- switch to tabix

SELECT * FROM system.dictionaries

and here we see some basic info about our dict

lets quick create a table for, say, event, as usual
Structure should be fairly familiar to you by now

And insert some stuff as well

let's now try to get something out of our dict

-- switch to tabix tab 3

executing select, and here we can see default values for pokemons
with ids not in our dict.

Don't like the casing? no problem

-- rename Name -> name; PetName -> pet_name
-- swithc tabix 4; reload
-- rename fields in query

Yep, we can hot reload even structure for our dictionaries

bonus point, lets create dict engine!

-- tabix tab 5

and we can do a join here or a simple select. could be also pretty convenient
dictionary engine was added just recently, so that's nice

Anyway.

-- swithc to slides with summary

I hope you enjoyed this video as much as I did,
See you next lesson!