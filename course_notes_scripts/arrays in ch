Preparation:
* rm data dir
* rm preprocessed configs
* slides
* start docker


Welcome back everyone
Today we'll talk about arrays.

One of the main reason for using arrays is the fact that we're not suppose to use joins in CH
We're suppose to store our data in very wide tables,
and arrays allow us to have one to many relationships with such an arrangement

Let's just streight to the business to get a better grasp of what I'm talking about

-- switch to tabix tab 1

so here we're of couse creating simple table with a filed of type Array(UInt16)

When we select we see nothing that would surprise us

Now let's move to juicy part.

We'll start simple with arrayMap

-- switch tabix tab

so here we're just resolving our pokemon's id to names with the help of our
good old dictionary.
straightforward enough. but not exactly what we're used to in relational world
Let's fix that

And Array join is to the help, but a coinsidence is a bit more interesting

-- swith to tab, execute

usually functions don't change a set of rows, just the values
The 'arrayJoin' function takes each row and generates a set of rows esentialy unfolding our result set
enought of CH docs talk. What is essentially happening here is with
the clause in line 3, we're resolving names with array join
but in lin 4 we're unfolding our arrays, and in essence we get denormalized table with
mapping pokemon name to pokemon id
I'd say arrayJoin is what helps us to model regular Relational db design

-- swith tabix next tub

we can also make it cleaner with ARRAY JOIN clause
which would be more familiar to most of us

Here we at least see Regular (air quotes) join

More weirdness with arrayEnumerate which pretty much enumarates every row in a subset
Could be useful. I think

-- switch to summary

Ok, so we've talked about arrays in clikchouse. Amazing feature that can help us
model more complex data

In particular, we've talked about arrayMap
technicuqe that allows us to map a value to another value;
And we've talked about arrayJoin. Pretty weird function that unfolds our
arrays for us, so we can view our data plain denormalized table

Array in ch allow us to model one to many relatioinships in the world of wide tables, so we
can avoid using joins, which are notoriusly slow in solutions like CH

Hope you enjoyed it as much as I did, and see you next video!

